[{"name":"app.R","content":"library(shiny)\nlibrary(vetiver)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(DT)\n\nui <- fluidPage(\n  titlePanel(\"Regression Model Prediction with Vetiver\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\n        \"api_url\",\n        \"API URL\",\n        value = \"http://127.0.0.1:8080/predict\",\n        placeholder = \"http://127.0.0.1:8080/predict\"\n      ),\n      helpText(\"Enter the URL of your Vetiver endpoint\"),\n\n      numericInput(\n        \"n_samples\",\n        \"Number of Samples to Generate\",\n        value = 1,\n        min = 1,\n        max = 100\n      ),\n      actionButton(\"generate\", \"Generate Random Input Data\"),\n\n      br(),\n      br(),\n      actionButton(\"predict\", \"Predict with Current Data\"),\n\n      br(),\n      br(),\n      helpText(\n        \"Note: The model expects 20 predictor variables (x1-x20).\"\n      )\n    ),\n    mainPanel(\n      h3(\"Generated Input Data\"),\n      DTOutput(\"input_data\"),\n      br(),\n      h3(\"Prediction Results\"),\n      verbatimTextOutput(\"prediction\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # Reactive value to store generated data\n  rv <- reactiveValues(data = NULL)\n\n  # Generate random data when button is clicked\n  observeEvent(input$generate, {\n    # Create a data frame with 20 predictor variables (x1-x20)\n    n <- input$n_samples\n    data <- as.data.frame(matrix(rnorm(n * 20), nrow = n))\n    names(data) <- paste0(\"x\", 1:20) # note lowercase to match API\n\n    rv$data <- data\n  })\n\n  # Display generated data\n  output$input_data <- renderDT({\n    req(rv$data)\n    datatable(rv$data, options = list(pageLength = 5, scrollX = TRUE))\n  })\n\n  # Make prediction when button is clicked\n  observeEvent(input$predict, {\n    req(rv$data)\n    req(input$api_url)\n\n    tryCatch(\n      {\n        # Create temporary endpoint\n        endpoint <- vetiver_endpoint(input$api_url)\n\n        # Use vetiver to make prediction\n        predictions <- predict(endpoint, rv$data)\n\n        output$prediction <- renderPrint({\n          cat(\"Prediction successful!\\n\\n\")\n          cat(\"Predicted values:\\n\")\n          print(predictions)\n        })\n      },\n      error = function(e) {\n        output$prediction <- renderPrint({\n          cat(\"Error in prediction:\\n\")\n          cat(e$message, \"\\n\\n\")\n\n          # Additional debug info\n          cat(\"Debug info:\\n\")\n          cat(\"API URL:\", input$api_url, \"\\n\")\n          cat(\"Data sent:\\n\")\n          print(head(rv$data))\n        })\n      }\n    )\n  })\n}\n\nshinyApp(ui, server)\n\n#shinylive::export(\"app_api\", \"shiny_app\")\n","type":"text"}]
